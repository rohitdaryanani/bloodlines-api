{
  "name": "hapi-auth-jwt",
  "description": "JSON Web Token (JWT) authentication plugin",
  "version": "2.1.2",
  "author": {
    "name": "Ryan Fitzgerald",
    "email": "ryan.fitz1@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ryanfitz/hapi-auth-jwt"
  },
  "main": "index",
  "keywords": [
    "hapi",
    "plugin",
    "auth",
    "JWT"
  ],
  "engines": {
    "node": ">=0.10.30"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hoek": "2.x.x",
    "jsonwebtoken": "5.0.x"
  },
  "peerDependencies": {
    "hapi": ">=8.x.x"
  },
  "devDependencies": {
    "boom": "2.x.x",
    "code": "1.x.x",
    "hapi": "8.x.x",
    "lab": "5.x.x",
    "grunt": "0.4.x",
    "grunt-contrib-jshint": "0.11.x",
    "grunt-contrib-watch": "0.6.x",
    "grunt-bump": "0.1.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/ryanfitz/hapi-auth-jwt/raw/master/LICENSE"
    }
  ],
  "readme": "### hapi-auth-jwt\n\n[**hapi**](https://github.com/spumko/hapi) JSON Web Token (JWT) authentication plugin\n\n[![Build Status](https://travis-ci.org/ryanfitz/hapi-auth-jwt.png?branch=master)](https://travis-ci.org/ryanfitz/hapi-auth-jwt)\n\nJSON Web Token authentication requires verifying a signed token. The `'jwt'` scheme takes the following options:\n\n- `key` - (required) The private key the token was signed with.\n- `validateFunc` - (optional) validation and user lookup function with the signature `function(token, callback)` where:\n    - `token` - the verified and decoded jwt token\n    - `callback` - a callback function with the signature `function(err, isValid, credentials)` where:\n        - `err` - an internal error.\n        - `isValid` - `true` if the token was valid otherwise `false`.\n        - `credentials` - a credentials object passed back to the application in `request.auth.credentials`. Typically, `credentials` are only\n          included when `isValid` is `true`, but there are cases when the application needs to know who tried to authenticate even when it fails\n          (e.g. with authentication mode `'try'`).\n\nSee the example folder for an executable example.\n\n```javascript\n\nvar Hapi = require('hapi'),\n    jwt = require('jsonwebtoken'),\n    server = new Hapi.Server();\n\nserver.connection({ port: 8080 });\n\n\nvar accounts = {\n    123: {\n        id: 123,\n        user: 'john',\n        fullName: 'John Doe',\n        scope: ['a', 'b']\n    }\n};\n\n\nvar privateKey = 'BbZJjyoXAdr8BUZuiKKARWimKfrSmQ6fv8kZ7OFfc';\n\n// Use this token to build your request with the 'Authorization' header.  \n// Ex:\n//     Authorization: Bearer <token>\nvar token = jwt.sign({ accountId: 123 }, privateKey);\n\n\nvar validate = function (decodedToken, callback) {\n\n    var error,\n        credentials = accounts[decodedToken.accountId] || {};\n\n    if (!credentials) {\n        return callback(error, false, credentials);\n    }\n\n    return callback(error, true, credentials)\n};\n\n\nserver.register(require('hapi-auth-jwt'), function (error) {\n\n    server.auth.strategy('token', 'jwt', {\n        key: privateKey,\n        validateFunc: validate\n    });\n\n    server.route({\n        method: 'GET',\n        path: '/',\n        config: {\n            auth: 'token'\n        }\n    });\n\n    // With scope requirements\n    server.route({\n        method: 'GET',\n        path: '/withScope',\n        config: {\n            auth: {\n                strategy: 'token',\n                scope: ['a']\n            }\n        }\n    });\n});\n\n\nserver.start();\n\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ryanfitz/hapi-auth-jwt/issues"
  },
  "homepage": "https://github.com/ryanfitz/hapi-auth-jwt",
  "_id": "hapi-auth-jwt@2.1.2",
  "dist": {
    "shasum": "41ebe2269c15ac38719e5b1e048b3bf4bb158252"
  },
  "_from": "hapi-auth-jwt@",
  "_resolved": "https://registry.npmjs.org/hapi-auth-jwt/-/hapi-auth-jwt-2.1.2.tgz"
}
